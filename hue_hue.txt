home page wali script.js

// NOTE: this example uses the chess.js library:
// https://github.com/jhlywa/chess.js
var board1 = Chessboard('myBoard', 'start');

var board = null
var game = new Chess()

function makeRandomMove () {
  var possibleMoves = game.moves()

  // exit if the game is over
  if (game.game_over()) return

  var randomIdx = Math.floor(Math.random() * possibleMoves.length)
  game.move(possibleMoves[randomIdx])
  board.position(game.fen())

  window.setTimeout(makeRandomMove, 1500)
}

board = Chessboard('myBoard', 'start')

window.setTimeout(makeRandomMove, 1500)

// Function for connecting to the Multiplayer project
function playOnline() {
    window.location.href = './multiplayer/index.html';
}

// Function for connecting to the AI Integrated project
function playBots() {
    window.location.href = './AI/index.html';
}

// Load the chessboard for a random vs. random game (using chessboard.js)
document.addEventListener("DOMContentLoaded", function() {
    const boardElement = document.getElementById("chessboard");

    // This code assumes you're using chessboard.js; add your random game logic here
    // Code snippet for chessboard.js initialization if needed:
    // const board = Chessboard('chessboard', 'start');
});

multiplayer wala script.js

var board1 = Chessboard('myBoard', 'start')
// NOTE: this example uses the chess.js library:
// https://github.com/jhlywa/chess.js

var board = null
var game = new Chess()
var $status = $('#status')
var $fen = $('#fen')
var $pgn = $('#pgn')
let c_player = null;
let currentMatchTime=null;

function startTimer(seconds, container, oncomplete) {
  let startTime, timer, obj, ms = seconds * 1000,
    display = document.getElementById(container);
  obj = {};
  obj.resume = function () {
    startTime = new Date().getTime();
    timer = setInterval(obj.step, 250); // adjust this number to affect granularity
    // lower numbers are more accurate, but more CPU-expensive
  };
  obj.pause = function () {
    ms = obj.step();
    clearInterval(timer);
  };
  obj.step = function () {
    let now = Math.max(0, ms - (new Date().getTime() - startTime)),
      m = Math.floor(now / 60000), s = Math.floor(now / 1000) % 60;
    s = (s < 10 ? "0" : "") + s;
    display.innerHTML = m + ":" + s;
    if (now == 0) {
      clearInterval(timer);
      obj.resume = function () { };
      if (oncomplete) oncomplete();
    }
    return now;
  };
  obj.resume();
  return obj;
}

function onDragStart(source, piece, position, orientation) {

  if (game.turn() != c_player) {
    return false;
  }

  // do not pick up pieces if the game is over
  if (game.game_over()) return false

  // only pick up pieces for the side to move
  if ((game.turn() === 'w' && piece.search(/^b/) !== -1) ||
    (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
    return false
  }
}

function onDrop(source, target) {
  // see if the move is legal
  var move = game.move({
    from: source,
    to: target,
    promotion: 'q' // NOTE: always promote to a queen for example simplicity
  })

  // illegal move
  if (move === null) return 'snapback';
  socket.emit('sync_state', game.fen(), game.turn());
  if(timerInstance){
    timerInstance.pause();
  }
  else{
    timerInstance= startTimer(Number(currentMatchTime) * 60, "timerDisplay", function () { alert("Done!"); });
  }
  updateStatus()
}

function onChange() {
  if (game.game_over()) {
    if (game.in_checkmate()) {
      const winner = game.turn() === 'b' ? 'White' : 'Black';
      socket.emit('game_over', winner);
    }
  }
}

// update the board position after the piece snap
// for castling, en passant, pawn promotion
function onSnapEnd() {
  board.position(game.fen())
}

function updateStatus() {
  var status = ''

  var moveColor = 'White'
  if (game.turn() === 'b') {
    moveColor = 'Black'
  }

  // checkmate?
  if (game.in_checkmate()) {
    status = 'Game over, ' + moveColor + ' is in checkmate.'
  }

  // draw?
  else if (game.in_draw()) {
    status = 'Game over, drawn position'
  }

  // game still on
  else {
    status = moveColor + ' to move'

    // check?
    if (game.in_check()) {
      status += ', ' + moveColor + ' is in check'
    }
  }

  $status.html(status)
  $fen.html(game.fen())
  $pgn.html(game.pgn())
}

var config = {
  draggable: true,
  position: 'start',
  onDragStart: onDragStart,
  onDrop: onDrop,
  onChange: onChange,
  onSnapEnd: onSnapEnd
}
board = Chessboard('myBoard', config)

updateStatus()

function handleButtonClick(event) {
  const timer = Number(event.target.getAttribute('data-time'));
  socket.emit('want_to_play', timer);
  $('#main-element').hide();
  $('#waiting_text_p').show();
}
let timerInstance=null;

document.addEventListener('DOMContentLoaded', function () {
  const buttons = document.getElementsByClassName('timer-button');
  for (let index = 0; index < buttons.length; index++) {
    const button = buttons[index];
    button.addEventListener('click', handleButtonClick)
  }
});

const socket = io('http://localhost:3000');

socket.on('total_players_count_change', function (totalPlayersCount) {
  $('#total_players').html('Total Players: ' + totalPlayersCount)
})

socket.on("match_made", (color,time) => {
  // alert("You are playing as " + color)
  c_player = color;



  $('#main-element').show();
  $('#waiting_text_p').hide();
  const currentPlayer = color === 'b' ? 'Black' : 'White';
  $('#buttonsParent').html("<p id='youArePlayingAs'>You are Playing as " + currentPlayer + "</p><p id='timerDisplay'></p>");

  $('#buttonsParent').addClass('flex-col'); 
  game.reset();
  board.clear();
  board.start();
  board.orientation(currentPlayer.toLowerCase());

  currentMatchTime=time;
  if(game.turn()===c_player){
    timerInstance= startTimer(Number(time) * 60, "timerDisplay", function () { alert("Done!"); });

  }
  else{
    timerInstance=null;
    $('#timerDisplay').html(currentMatchTime+":00");
  }
});

socket.on('sync_state_from_server', function (fen, turn) {
  game.load(fen);
  game.setTurn(turn);
  board.position(fen);

  if(timerInstance){
    timerInstance.resume();
  }
  else{
    timerInstance= startTimer(Number(currentMatchTime) * 60, "timerDisplay", function () { alert("Done!"); });
  }
})

socket.on('game_over_from_server', function (winner) {
  alert(winner + "won the match");
  // window.location.reload();
})

multiplayer wala socket.js 

const { createServer } = require("http");
const { Server } = require("socket.io");
const PORT = 3000;
const httpServer = createServer();
const io = new Server(httpServer, {
  cors: {
    origin: "*",
    methods: ["*"]
  }
});

let totalPlayers = 0;
let players = {};
let waiting = {
  '10': [],
  '15': [],
  '20': [],
};
let matches = {
  '10': [],
  '15': [],
  '20': [],
};

function removeSocketFromWaitingPeriod(socket) {
  const foreachLoop = [10, 15, 20];
  foreachLoop.forEach(element => {
    const index = waiting[element].indexOf(socket);
    if (index > -1) {
      waiting[element].splice(index, 1);
    }
  });
}

function fireTotalPlayers() {
  io.emit('total_players_count_change', totalPlayers);
}
function FireonDisConnect(socket) {
  removeSocketFromWaitingPeriod(socket.id);
  totalPlayers--;
  fireTotalPlayers();
}

function initialsetupMatch(opponentId, socketId,time) {

  players[opponentId].emit("match_made", "w",time);
  players[socketId].emit("match_made", "b",time);

  players[opponentId].on('sync_state', function (fen, turn) {
    players[socketId].emit('sync_state_from_server', fen, turn);
  });
  players[socketId].on('sync_state', function (fen, turn) {
    players[opponentId].emit('sync_state_from_server', fen, turn);

  });
  players[opponentId].on('game_over', function (winner) {
    players[socketId].emit('game_over_from_server', winner);
  });
  players[socketId].on('game_over', function (winner) {
    players[opponentId].emit('game_over_from_server', winner);

  });
}

function HandlePlayRequest(socket, time) {

  if (waiting[time].length > 0) {
    const opponentId = waiting[time].splice(0, 1)[0];
    matches[time].push({
      [opponentId]: socket.id,
    });
    initialsetupMatch(opponentId, socket.id,time);
    return;
  }

  if (!waiting[time].includes(socket.id)) {
    waiting[time].push(socket.id);
  }
}

function FireOnConnected(socket) {
  socket.on('want_to_play', function (timer) {

    HandlePlayRequest(socket, timer);
    console.log(waiting);
  });
  totalPlayers++;
  fireTotalPlayers();
}

io.on("connection", (socket) => {
  players[socket.id] = socket
  FireOnConnected(socket);
  socket.on('disconnect', () => FireonDisConnect(socket));
  // ... 
});

httpServer.listen(PORT, function () {
  console.log("Your server is running at port " + PORT);
});

AI ka scipt.js 

var board1 = Chessboard('myBoard', 'start');
var board = null;
var game = new Chess();

function onDragStart(source, piece, position, orientation) {
    // do not pick up pieces if the game is over
    if (game.game_over()) return false;

    // only pick up pieces for White
    if (piece.search(/^b/) !== -1) return false;
}

function makeAIMove() {
  // Check if the game is over
  if (game.game_over()) {
      console.log("Game over: no moves possible.");
      return;
  }

  // Log the current FEN string for debugging
  const currentFEN = game.fen();
  console.log("Current FEN: " + currentFEN);

  // Define the API endpoint and parameters
  const apiUrl = `https://stockfish.online/api/s/v2.php?fen=${encodeURIComponent(currentFEN)}&depth=15`; // You can adjust the depth as needed

  // Make the GET request to the Stockfish API
  $.ajax({
      url: apiUrl,
      method: "GET",
      dataType: "json",
      success: function (response) {
          if (response.success) {
              // Extract the best move from the response
              const bestMove = response.bestmove.split(" ")[1]; // Get only the move part (e.g., "b7b6")

              // Make the move in the game
              const fromSquare = bestMove.substring(0, 2);
              const toSquare = bestMove.substring(2, 4);

              const move = game.move({
                  from: fromSquare,
                  to: toSquare,
                  promotion: 'q' // promote to queen if applicable
              });

              if (move) {
                  // Update the board with the new position
                  board.position(game.fen());
              } else {
                  console.error("Illegal move attempted: " + bestMove);
              }
          } else {
              console.error("Stockfish API error: " + response.data);
          }
      },
      error: function (xhr) {
          console.error("Error fetching move from Stockfish API: " + xhr.status + " - " + xhr.statusText);
      }
  });
}






function onDrop(source, target) {
    // see if the move is legal
    var move = game.move({
        from: source,
        to: target,
        promotion: 'q' // NOTE: always promote to a queen for simplicity
    });

    // illegal move
    if (move === null) return 'snapback';

    // Make AI move for black
    window.setTimeout(makeAIMove, 250);
}

// update the board position after the piece snap
// for castling, en passant, pawn promotion
function onSnapEnd() {
    board.position(game.fen());
}

var config = {
    draggable: true,
    position: 'start',
    onDragStart: onDragStart,
    onDrop: onDrop,
    onSnapEnd: onSnapEnd
};
board = Chessboard('myBoard', config);

AI me ek chess.js hai wo bahut badi file hai , wo mai khud handle kar lunga uski bas tum space chhod dena jahan muje wo paste karna ho ya chess.js file agar root me daalni ho to bata dena 

aur suno mera logic bilkul sahi laga hai uske sath chhed chhad mat karna plz jitna bola gaya hai utna karna 

chal ab start ho ja , aur file structure bhi de dena , taaki sahi see arrange kar paun